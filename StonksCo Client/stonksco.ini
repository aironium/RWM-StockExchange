[placementRule_singleClient]
searchTags: stonksco_client
maxCount: 0
searchDistance: 999999999
cannotPlaceMessage: Only one StonksCo Stock Exchange Field Office is allowed per player.


[core]
name: stonksco_agent
displayText: StonksCo Office
displayDescription: StonksCo Stock Exchange Field Office\n\n-Allows buying and selling stocks\n-Great for passive income\n-Stock Price updates every 60 seconds\n\n"Buy the dip, sell the rip"\n(Only for the risk takers. We are not responsible for your losses LMAO)
class: CustomUnitMetadata
price: 7500
maxHp: 2000
mass: 9000
tags: stonksco_client

techLevel: 2
buildSpeed: 60s
#availableInDemo: true

radius: 35
#displayRadius: 35
isBio: false
isBuilding: true

softCollisionOnAll: 5


constructionFootprint: -2,-2,2, 3
footprint: -2,-2, 2, 3

builtFrom_1_name: combatEngineer, mechEngineer

autoTriggerCooldownTime_allowDangerousHighCPU: true
autoTriggerCooldownTime: 0.01s
@memory currentStockPrice:number
@memory server:unit
@memory stockCount:number
@memory lastStockPrice:number
@memory teamNum:number
@memory me:unit
@memory maxBuy:number
@memory timer:number

[hiddenAction_linktoserver]
autoTriggerOnEvent: created
setUnitMemory: server = globalSearchForFirstUnit(withTag="stonksco_server", relation="any"), me = self

[core]
updateUnitMemory: currentStockPrice = memory.server.readUnitMemory("priceHistory", type="number[]").get(21), timer = memory.server.readUnitMemory("ts", type="number")

[template_updateMem]
setUnitMemory: stockCount = memory.server.readUnitMemory("stockAmount", type="number[]").get(${teamNumber}), lastStockPrice = memory.server.readUnitMemory("lastPurchasePrice", type="number[]").get(${teamNumber}), maxBuy = int(self.resource.credits / memory.currentStockPrice)
autoTrigger: if self.teamId == ${teamNumber}

[hiddenAction_upMem0]
@copyFromSection: template_updateMem
@define teamNumber: 0

[hiddenAction_upMem1]
@copyFromSection: template_updateMem
@define teamNumber: 1

[hiddenAction_upMem2]
@copyFromSection: template_updateMem
@define teamNumber: 2

[hiddenAction_upMem3]
@copyFromSection: template_updateMem
@define teamNumber: 3

[hiddenAction_upMem4]
@copyFromSection: template_updateMem
@define teamNumber: 4

[hiddenAction_upMem5]
@copyFromSection: template_updateMem
@define teamNumber: 5

[hiddenAction_upMem6]
@copyFromSection: template_updateMem
@define teamNumber: 6

[hiddenAction_upMem7]
@copyFromSection: template_updateMem
@define teamNumber: 7

[hiddenAction_upMem8]
@copyFromSection: template_updateMem
@define teamNumber: 8

[hiddenAction_upMem9]
@copyFromSection: template_updateMem
@define teamNumber: 9

[action_stockPrice]
buildSpeed: 0s
displayType: infoOnly
text: Stock Price: \n$%{memory.currentStockPrice}
isLocked: true
addResources: credits=1
pos: 0
description: Stock Price History (Recent 10)\n1: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(11)}\n2: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(12)}\n3: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(13)}\n4: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(14)}\n5: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(15)}\n6: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(16)}\n7: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(17)}\n8: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(18)}\n9: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(19)}\n10: $%{memory.server.readUnitMemory("priceHistory", type="number[]").get(20)}\n----------------------\nCurrent Price: \n$%{memory.server.readUnitMemory("priceHistory", type="number[]").get(21)}\n----------------------\nStock price will update in\n %{60 - memory.timer} seconds.
isGuiBlinking: if memory.server.readUnitMemory("ts", type="number") == 1
isVisible: if self.completed()

[template_stockCount]
buildSpeed: 0s
displayType: infoOnly
text: Your Stocks: \n%{memory.server.readUnitMemory("stockAmount", type="number[]").get(${teamNumber})}x 
isLocked: true
addResources: credits=1
pos: 0.1
description: You have %{memory.server.readUnitMemory("stockAmount", type="number[]").get(${teamNumber})} stocks \n\nYou bought your stocks for: $%{ memory.server.readUnitMemory("lastPurchasePrice", type="number[]").get(${teamNumber})}\n You can sell all your stocks for: $%{memory.server.readUnitMemory("stockAmount", type="number[]").get(${teamNumber}) * memory.currentStockPrice}\n\nPotential Income: %{select((memory.server.readUnitMemory("lastPurchasePrice", type="number[]").get(${teamNumber})) <= (memory.currentStockPrice * memory.server.readUnitMemory("stockAmount", type="number[]").get(0)), "[GAINED]", "[LOST]")} $%{(memory.currentStockPrice * memory.server.readUnitMemory("stockAmount", type="number[]").get(${teamNumber})) - (memory.server.readUnitMemory("lastPurchasePrice", type="number[]").get(${teamNumber}))}
isVisible: if self.teamId == ${teamNumber} and self.completed()

[action_stockCountT0]
@copyFromSection: template_stockCount
@define teamNumber: 0

[action_stockCountT1]
@copyFromSection: template_stockCount
@define teamNumber: 1

[action_stockCountT2]
@copyFromSection: template_stockCount
@define teamNumber: 2

[action_stockCountT3]
@copyFromSection: template_stockCount
@define teamNumber: 3

[action_stockCountT4]
@copyFromSection: template_stockCount
@define teamNumber: 4

[action_stockCountT5]
@copyFromSection: template_stockCount
@define teamNumber: 5

[action_stockCountT6]
@copyFromSection: template_stockCount
@define teamNumber: 6

[action_stockCountT7]
@copyFromSection: template_stockCount
@define teamNumber: 7

[action_stockCountT8]
@copyFromSection: template_stockCount
@define teamNumber: 8

[action_stockCountT9]
@copyFromSection: template_stockCount
@define teamNumber: 9

[template_buyStock]
ai_isHighPriority: true
text: BUY ${am2} Stock(s)
description: Buy ${am} amount of Stocks. \n\nTotal Cost: $%{(memory.currentStockPrice * ${am})}
isLocked: if self.resource.credits < (memory.currentStockPrice * ${am})
isLockedMessage: Insufficient funds
isLockedAlt: if memory.currentStockPrice < 10
isLockedAltMessage: "Anomalous stock price detected. Please wait for a minute. Pesky hackers are trying to inflate economy"
addResourcesWithLogic: credits = (memory.currentStockPrice * ${am}) * -1
sendMessageTo: memory.server
sendMessageWithTags: buyStock
sendMessageWithData: team = memory.me.teamId, amount= ${am}
buildSpeed: 0s
price: 0
addAllActionCooldownsTime: 1s
pos: ${ps}
showQuickWarLogToPlayer: You bought ${am} stocks successfully!
isVisible: if self.completed()

[action_buyStock1]
@copyFromSection: template_buyStock
@define am: 1
@define am2: 1
@define ps: 2.1

[action_buyStock10]
@copyFromSection: template_buyStock
@define am: 10
@define am2: 10
@define ps: 2.3

[action_buyStock100]
@copyFromSection: template_buyStock
@define am: 100
@define am2: 100
@define ps: 2.5

[action_buyStock1000]
@copyFromSection: template_buyStock
@define am: 1000
@define am2: 1k
@define ps: 2.7

[action_buyStock10000]
@copyFromSection: template_buyStock
@define am: 10000
@define am2: 10k
@define ps: 2.9

[action_buyStock100000]
@copyFromSection: template_buyStock
@define am: 100000
@define am2: 100k
@define ps: 3.1

[action_buyStock1000000]
@copyFromSection: template_buyStock
@define am: 100000
@define am2: 1M
@define ps: 3.3

[action_buyStockAll]
ai_isHighPriority: true
text: BUY MAX Stock(s)
description: Buy %{memory.maxBuy} amount of Stocks. \n\nTotal Cost: $%{(memory.currentStockPrice) * memory.maxBuy}
isLocked: if self.resource.credits < (memory.currentStockPrice)
isLockedMessage: Insufficient funds
isLockedAlt: if memory.currentStockPrice < 10
isLockedAltMessage: "Anomalous stock price detected. Please wait for a minute. Pesky hackers are trying to inflate economy"
sendMessageTo: memory.server
sendMessageWithTags: buyStock
sendMessageWithData: team = memory.me.teamId, amount= memory.maxBuy
buildSpeed: 0.2s
price: 0
addAllActionCooldownsTime: 3s
pos: 1.0
addResourcesWithLogic: credits = ((memory.currentStockPrice) * memory.maxBuy) * -1
showQuickWarLogToPlayer: You bought %{memory.maxBuy} stocks successfully!
isVisible: if self.completed()

[template_sellStock]
ai_isHighPriority: true
text: SELL ${am2} Stocks
description: Sell ${am} amount of Stocks. \n\nTotal Earnings: $%{(memory.currentStockPrice * ${am})}
isLocked: if memory.stockCount < ${am}
isLockedMessage: Buy more stocks!
isLockedAlt: if memory.currentStockPrice < 10
isLockedAltMessage: "Anomalous stock price detected. Please wait for a minute. Pesky hackers are trying to inflate economy"
addResourcesWithLogic: credits = (memory.currentStockPrice * ${am})
sendMessageTo: memory.server
sendMessageWithTags: sellStock
sendMessageWithData: team = memory.me.teamId, amount= ${am}
buildSpeed: 0s
price: 0
addAllActionCooldownsTime: 1s
pos: ${ps}
showQuickWarLogToPlayer: You sold ${am} stocks successfully!
isVisible: if self.completed()

[action_sellStock1]
@copyFromSection: template_sellStock
@define am: 1
@define am2: 1
@define ps: 2.2

[action_sellStock10]
@copyFromSection: template_sellStock
@define am: 10
@define am2: 10
@define ps: 2.4

[action_sellStock100]
@copyFromSection: template_sellStock
@define am: 100
@define am2: 100
@define ps: 2.6

[action_sellStock1000]
@copyFromSection: template_sellStock
@define am: 1000
@define am2: 1k
@define ps: 2.8

[action_sellStock10000]
@copyFromSection: template_sellStock
@define am: 10000
@define am2: 10k
@define ps: 3

[action_sellStock100000]
@copyFromSection: template_sellStock
@define am: 100000
@define am2: 100k
@define ps: 3.2

[action_sellStock1000000]
@copyFromSection: template_sellStock
@define am: 1000000
@define am2: 1M
@define ps: 3.4

[action_sellAllStock]
ai_isHighPriority: true
text: SELL All Stocks
description: Sell %{memory.stockCount} amount of Stocks. \n\nTotal Earnings: $%{(memory.currentStockPrice * memory.stockCount)}
isLocked: if memory.stockCount < 1
isLockedMessage: Buy more stocks!
isLockedAlt: if memory.currentStockPrice < 10
isLockedAltMessage: "Anomalous stock price detected. Please wait for a minute. Pesky hackers are trying to inflate economy"
addResourcesWithLogic: credits = (memory.currentStockPrice * memory.stockCount)
sendMessageTo: memory.server
sendMessageWithTags: sellStock
sendMessageWithData: team = memory.me.teamId, amount= memory.stockCount
buildSpeed: 0s
price: 0
addAllActionCooldownsTime: 1s
pos: 1.1
showQuickWarLogToPlayer: You sold %{memory.stockCount} stocks successfully!
isVisible: if self.completed()


[decal_stonksman]
order: 1.5
layer: beforeUI
image: stonksman.png
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
yOffsetRelative: 150
alpha: 0.4
teamColors: true
onlyWhileActive: true

[decal_chartBG]
onlyWhileActive: true
order: 1
layer: beforeUI
image: chartbg.png
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
yOffsetRelative: 150
alpha: 0.75
teamColors: true

[template_priceDot]
onlyWhileActive: true
layer: beforeUI
imageScale: 0.85
order: 3
imageStack: chartdown.png, chartup.png
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
xOffsetRelative: ${x}
yOffsetAbsolute: (100 + int((memory.server.readUnitMemory("priceHistory", type="number[]").get(${in}))/100)) * -1
stack_hOffset: 0
stack_indexCount: select(memory.server.readUnitMemory("priceHistory", type="number[]").get(${in}) > memory.server.readUnitMemory("priceHistory", type="number[]").get(${in-1}), 2, 1) 

[decal_dot1G]
@copyFromSection: template_priceDot
@define x: -100
@define in: 1

[decal_dot2G]
@copyFromSection: template_priceDot
@define x: -90
@define in: 2

[decal_dot3G]
@copyFromSection: template_priceDot
@define x: -80
@define in: 3

[decal_dot4G]
@copyFromSection: template_priceDot
@define x: -70
@define in: 4

[decal_dot5G]
@copyFromSection: template_priceDot
@define x: -60
@define in: 5

[decal_dot6G]
@copyFromSection: template_priceDot
@define x: -50
@define in: 6


[decal_dot7G]
@copyFromSection: template_priceDot
@define x: -40
@define in: 7

[decal_dot8G]
@copyFromSection: template_priceDot
@define x: -30
@define in: 8

[decal_dot9G]
@copyFromSection: template_priceDot
@define x: -20
@define in: 9

[decal_dot10G]
@copyFromSection: template_priceDot
@define x: -10
@define in: 10

[decal_dot11G]
@copyFromSection: template_priceDot
@define x: 0
@define in: 11

[decal_dot12G]
@copyFromSection: template_priceDot
@define x: 10
@define in: 12

[decal_dot13G]
@copyFromSection: template_priceDot
@define x: 20
@define in: 13

[decal_dot14G]
@copyFromSection: template_priceDot
@define x: 30
@define in: 14

[decal_dot15G]
@copyFromSection: template_priceDot
@define x: 40
@define in: 15

[decal_dot16G]
@copyFromSection: template_priceDot
@define x: 50
@define in: 16

[decal_dot17G]
@copyFromSection: template_priceDot
@define x: 60
@define in: 17

[decal_dot18G]
@copyFromSection: template_priceDot
@define x: 70
@define in: 18

[decal_dot19G]
@copyFromSection: template_priceDot
@define x: 80
@define in: 19

[decal_dot20G]
@copyFromSection: template_priceDot
@define x: 90
@define in: 20

[decal_dot21G]
@copyFromSection: template_priceDot
@define x: 100
@define in: 21

[template_dotLineRed]
onlyWhileActive: true
layer: beforeUI
order: 2
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
xOffsetRelative: ${x}
yOffsetAbsolute: (100 + int((memory.server.readUnitMemory("priceHistory", type="number[]").get(${in}))/100)) * -1
lineWidth:4
#+ ${x + 10} # 
drawLineTo: createMarker(x=self.x + (${x + 10}) , y=(self.y + (100+ int((memory.server.readUnitMemory("priceHistory", type="number[]").get(${in+1}))/100)) * -1))
color: #ff0000
isVisible: if memory.server.readUnitMemory("priceHistory", type="number[]").get(${in}) >= memory.server.readUnitMemory("priceHistory", type="number[]").get(${in+1})

[decal_line1R]
@copyFromSection: template_dotLineRed
@define x: -100
@define in: 1

[decal_line2R]
@copyFromSection: template_dotLineRed
@define x: -90
@define in: 2

[decal_line3R]
@copyFromSection: template_dotLineRed
@define x: -80
@define in: 3

[decal_line4R]
@copyFromSection: template_dotLineRed
@define x: -70
@define in: 4

[decal_line5R]
@copyFromSection: template_dotLineRed
@define x: -60
@define in: 5

[decal_line6R]
@copyFromSection: template_dotLineRed
@define x: -50
@define in: 6

[decal_line7R]
@copyFromSection: template_dotLineRed
@define x: -40
@define in: 7

[decal_line8R]
@copyFromSection: template_dotLineRed
@define x: -30
@define in: 8

[decal_line9R]
@copyFromSection: template_dotLineRed
@define x: -20
@define in: 9

[decal_line10R]
@copyFromSection: template_dotLineRed
@define x: -10
@define in: 10

[decal_line11R]
@copyFromSection: template_dotLineRed
@define x: 0
@define in: 11

[decal_line12R]
@copyFromSection: template_dotLineRed
@define x: 10
@define in: 12

[decal_line13R]
@copyFromSection: template_dotLineRed
@define x: 20
@define in: 13

[decal_line14R]
@copyFromSection: template_dotLineRed
@define x: 30
@define in: 14

[decal_line15R]
@copyFromSection: template_dotLineRed
@define x: 40
@define in: 15

[decal_line16R]
@copyFromSection: template_dotLineRed
@define x: 50
@define in: 16

[decal_line17R]
@copyFromSection: template_dotLineRed
@define x: 60
@define in: 17

[decal_line18R]
@copyFromSection: template_dotLineRed
@define x: 70
@define in: 18

[decal_line19R]
@copyFromSection: template_dotLineRed
@define x: 80
@define in: 19

[decal_line20R]
@copyFromSection: template_dotLineRed
@define x: 90
@define in: 20

[template_dotLineGreen]
onlyWhileActive: true
layer: beforeUI
order: 2
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
xOffsetRelative: ${x}
yOffsetAbsolute: (100 + int((memory.server.readUnitMemory("priceHistory", type="number[]").get(${in}))/100)) * -1
lineWidth:4
#+ ${x + 10} # 
drawLineTo: createMarker(x=self.x + (${x + 10}) , y=(self.y + (100+ int((memory.server.readUnitMemory("priceHistory", type="number[]").get(${in+1}))/100)) * -1))
color: #00ff00
isVisible: if memory.server.readUnitMemory("priceHistory", type="number[]").get(${in}) < memory.server.readUnitMemory("priceHistory", type="number[]").get(${in+1})

[decal_line1G]
@copyFromSection: template_dotLineGreen
@define x: -100
@define in: 1

[decal_line2G]
@copyFromSection: template_dotLineGreen
@define x: -90
@define in: 2

[decal_line3G]
@copyFromSection: template_dotLineGreen
@define x: -80
@define in: 3

[decal_line4G]
@copyFromSection: template_dotLineGreen
@define x: -70
@define in: 4

[decal_line5G]
@copyFromSection: template_dotLineGreen
@define x: -60
@define in: 5

[decal_line6G]
@copyFromSection: template_dotLineGreen
@define x: -50
@define in: 6

[decal_line7G]
@copyFromSection: template_dotLineGreen
@define x: -40
@define in: 7

[decal_line8G]
@copyFromSection: template_dotLineGreen
@define x: -30
@define in: 8

[decal_line9G]
@copyFromSection: template_dotLineGreen
@define x: -20
@define in: 9

[decal_line10G]
@copyFromSection: template_dotLineGreen
@define x: -10
@define in: 10

[decal_line11G]
@copyFromSection: template_dotLineGreen
@define x: 0
@define in: 11

[decal_line12G]
@copyFromSection: template_dotLineGreen
@define x: 10
@define in: 12

[decal_line13G]
@copyFromSection: template_dotLineGreen
@define x: 20
@define in: 13

[decal_line14G]
@copyFromSection: template_dotLineGreen
@define x: 30
@define in: 14

[decal_line15G]
@copyFromSection: template_dotLineGreen
@define x: 40
@define in: 15

[decal_line16G]
@copyFromSection: template_dotLineGreen
@define x: 50
@define in: 16

[decal_line17G]
@copyFromSection: template_dotLineGreen
@define x: 60
@define in: 17

[decal_line18G]
@copyFromSection: template_dotLineGreen
@define x: 70
@define in: 18

[decal_line19G]
@copyFromSection: template_dotLineGreen
@define x: 80
@define in: 19

[decal_line20G]
@copyFromSection: template_dotLineGreen
@define x: 90
@define in: 20

[decal_timer]
onlyWhileActive: true
layer: beforeUI
order: 5
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
xOffsetRelative: -95
yOffsetAbsolute: -92
lineWidth: 5
drawLineTo: createMarker(x=((self.x - 95) + (190 * (memory.timer / 60))) , y= (self.y - (92)))
color:  #FFA500
isVisible: if memory.timer > 0

[comment_decal_timerbg]
onlyWhileActive: true
layer: beforeUI
order: 9
onlyPlayersWithUnitControl: true
onlyWhenSelectedByOwnPlayer: true
xOffsetRelative: -91
yOffsetAbsolute: -92
lineWidth: 6
drawLineTo: createMarker(x=self.x + 91 , y= self.y - 92)
color:  #ffffff

[graphics]
total_frames: 1

image: stonksco.png
#image_back: base_bottom.png
image_wreak: NONE

#scaleImagesTo: 20
#scaleTurretImagesTo: 9

#AUTO
image_shadow: AUTO
shadowOffsetX:0
shadowOffsetY:2


[attack]
canAttack: false
canAttackFlyingUnits: false
canAttackLandUnits:   false
canAttackUnderwaterUnits: false

turretSize: 0
turretTurnSpeed: 0
maxAttackRange: 0
shootDelay: 0


[movement]
movementType: LAND
moveSpeed: 0
moveAccelerationSpeed: 0
moveDecelerationSpeed: 0

maxTurnSpeed: 0
turnAcceleration: 0




